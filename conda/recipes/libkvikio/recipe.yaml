# Copyright (c) 2025, NVIDIA CORPORATION.
schema_version: 1

context:
  version: ${{ env.get("RAPIDS_PACKAGE_VERSION") }}
  minor_version: ${{ (version | split("."))[:2] | join(".") }}
  # We need to support three cases:
  # 1. Linux x86_64, which always uses libcufile
  # 2. Linux aarch64 with CUDA >= 12.2, which uses libcufile
  # 3. Linux aarch64 with CUDA < 12.2, which does not use libcufile
  # Each case has different cuda-version constraints as expressed below
  should_use_cufile: ${{ x86_64 or (aarch64 and cuda_version >= "12.2") }}
  # When reverting, instances of cuda_key_string can be replaced with cuda_major
  cuda_key_string: ${{ ("cuda" + (cuda_version | replace(".", "_"))) if supports_cuda else "cpu" }}
  #cuda_version: ${{ (env.get("RAPIDS_CUDA_VERSION") | split("."))[:2] | join(".") }}
  #cuda_major: '${{ (env.get("RAPIDS_CUDA_VERSION") | split("."))[0] }}'
  date_string: '${{ env.get("RAPIDS_DATE_STRING") }}'
  head_rev: '${{ git.head_rev(".")[:8] }}'
  cmake_args: ${{ "" if supports_cuda else "--cmake-args=\\\"-DKvikIO_CUDA_SUPPORT=OFF \\\"" }}

recipe:
  name: libkvikio-split

cache:
  source:
    path: ../../..

  build:
    script:
      content: |

        # Remove `-fdebug-prefix-map` line from CFLAGS and CXXFLAGS so the
        # incrementing version number in the compile line doesn't break the
        # cache
        set -x
        export CFLAGS=$(echo $CFLAGS | sed -E 's@\-fdebug\-prefix\-map[^ ]*@@g')
        export CXXFLAGS=$(echo $CXXFLAGS | sed -E 's@\-fdebug\-prefix\-map[^ ]*@@g')
        set +x

        ./build.sh -v -n libkvikio ${{ cmake_args }}
      secrets:
        - AWS_ACCESS_KEY_ID
        - AWS_SECRET_ACCESS_KEY
        - AWS_SESSION_TOKEN
      env:
        CMAKE_C_COMPILER_LAUNCHER: ${{ env.get("CMAKE_C_COMPILER_LAUNCHER") }}
        CMAKE_CUDA_COMPILER_LAUNCHER: ${{ env.get("CMAKE_CUDA_COMPILER_LAUNCHER") }}
        CMAKE_CXX_COMPILER_LAUNCHER: ${{ env.get("CMAKE_CXX_COMPILER_LAUNCHER") }}
        CMAKE_GENERATOR: ${{ env.get("CMAKE_GENERATOR") }}
        PARALLEL_LEVEL: ${{ env.get("PARALLEL_LEVEL") }}
        RAPIDS_ARTIFACTS_DIR: ${{ env.get("RAPIDS_ARTIFACTS_DIR") }}
        SCCACHE_BUCKET: ${{ env.get("SCCACHE_BUCKET") }}
        SCCACHE_IDLE_TIMEOUT: ${{ env.get("SCCACHE_IDLE_TIMEOUT") }}
        SCCACHE_REGION: ${{ env.get("SCCACHE_REGION") }}
        SCCACHE_S3_USE_SSL: ${{ env.get("SCCACHE_S3_USE_SSL") }}
        SCCACHE_S3_NO_CREDENTIALS: ${{ env.get("SCCACHE_S3_NO_CREDENTIALS") }}
        SCCACHE_S3_KEY_PREFIX: libkvikio/${{ env.get("RAPIDS_CONDA_ARCH") }}/cuda${{ cuda_key_string }}
  requirements:
    build:
      - ${{ compiler("c") }}
      - ${{ compiler("cxx") }}
      - cmake ${{ cmake_version }}
      - ninja
      - ${{ stdlib("c") }}
      - if: supports_cuda
        then:
        - ${{ compiler("cuda") }}
        - cuda-version =${{ cuda_version }}
    host:
      - libcurl ==${{ libcurl_version }}
      - if: supports_cuda
        then:
        - cuda-version =${{ cuda_version }}
        - if: should_use_cufile
          then:
          - libcufile-dev
        - libnuma

outputs:
  - package:
      name: libkvikio
      version: ${{ version }}
    build:
      script:
        content: |
          cmake --install cpp/build
      string: ${{ cuda_key_string }}_${{ date_string }}_${{ head_rev }}
      dynamic_linking:
        overlinking_behavior: "error"
      prefix_detection:
        ignore:
          - lib/libkvikio.so
    requirements:
      build:
        - cmake ${{ cmake_version }}
        - ${{ compiler("c") }}
      host:
        - if: supports_cuda
          then:
          - cuda-version =${{ cuda_version }}
        - libcurl ==${{ libcurl_version }}
      run:
        - if: supports_cuda
          then:
          - if: x86_64
            then:
            - ${{ pin_compatible("cuda-version", upper_bound="x", lower_bound="x") }}
            else:
            - if: aarch64 and cuda_version >= "12.2"
              then:
              - ${{ pin_compatible("cuda-version", upper_bound="x", lower_bound="12.2.0a0") }}
              else:
              - ${{ pin_compatible("cuda-version", upper_bound="12.2.0a0", lower_bound="12.0") }}
          - if: should_use_cufile
            then:
            - libcufile-dev
      ignore_run_exports:
        by_name:
          - if: supports_cuda
            then:
            - cuda-version
            - if: should_use_cufile
              then:
              - libcufile
    tests:
      - script:
          - test -f $PREFIX/include/kvikio/file_handle.hpp
    about:
      homepage: ${{ load_from_file("python/libkvikio/pyproject.toml").project.urls.Homepage }}
      license: ${{ load_from_file("python/libkvikio/pyproject.toml").project.license.text }}
      summary: ${{ load_from_file("python/libkvikio/pyproject.toml").project.description }}

  - package:
      name: libkvikio-tests
      version: ${{ version }}
    build:
      string: ${{ cuda_key_string }}_${{ date_string }}_${{ head_rev }}
      dynamic_linking:
        overlinking_behavior: "error"
      script:
        content: |
          cmake --install cpp/build --component testing
    requirements:
      build:
        - cmake ${{ cmake_version }}
        - ${{ compiler("c") }}
      host:
        - ${{ pin_subpackage("libkvikio", exact=True) }}
        - libcurl ==${{ libcurl_version }}
        - if: supports_cuda
          then:
          - cuda-version =${{ cuda_version }}
          - cuda-cudart-dev
          - if: should_use_cufile
            then:
            - libcufile-dev
      run:
        - if: supports_cuda
          then:
          - if: x86_64
            then:
            - ${{ pin_compatible("cuda-version", upper_bound="x", lower_bound="x") }}
            else:
            - if: aarch64 and cuda_version >= "12.2"
              then:
              - ${{ pin_compatible("cuda-version", upper_bound="x", lower_bound="12.2.0a0") }}
              else:
              - ${{ pin_compatible("cuda-version", upper_bound="12.2.0a0", lower_bound="12.0") }}
          - cuda-cudart
      ignore_run_exports:
        by_name:
          - if: supports_cuda
            then:
            - cuda-cudart
            - cuda-version
            - libnuma
            - if: should_use_cufile
              then:
              - libcufile
    about:
      homepage: ${{ load_from_file("python/libkvikio/pyproject.toml").project.urls.Homepage }}
      license: ${{ load_from_file("python/libkvikio/pyproject.toml").project.license.text }}
      summary: libkvikio tests
